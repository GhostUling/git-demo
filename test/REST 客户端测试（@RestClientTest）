
package com.example.integration.web;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

// 必要头文件
import com.example.controller.UserController;
import com.example.service.UserService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;



@WebMvcTest(UserController.class)
public class UserControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private UserService userService;

    @Test
    void getUserById_ReturnsUser() throws Exception {
        when(userService.findById(1L)).thenReturn(new User(1L, "Alice"));
        mockMvc.perform(get("/users/1"))
               .andExpect(status().isOk())
               .andExpect(jsonPath("$.name").value("Alice"));
    }
}

@DataJpaTest
@Testcontainers
public class UserRepositoryTest {
    @Container
    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:15");

    @DynamicPropertySource
    static void configureProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgres::getJdbcUrl);
        registry.add("spring.datasource.username", postgres::getUsername);
        registry.add("spring.datasource.password", postgres::getPassword);
    }

    @Autowired
    private UserRepository userRepository;

    @Test
    void testSaveUser() {
        User user = new User("Bob");
        User saved = userRepository.save(user);
        assertNotNull(saved.getId());
    }
}

@RestClientTest(WeatherService.class)
public class WeatherServiceTest {
    @Autowired
    private MockRestServiceServer server;

    @Autowired
    private WeatherService weatherService;

    @Test
    void getWeather_ReturnsData() {
        server.expect(requestTo("/weather?city=Beijing"))
              .andRespond(withSuccess("{\"temp\":25}", MediaType.APPLICATION_JSON));

        WeatherInfo info = weatherService.getWeather("Beijing");
        assertEquals(25, info.getTemp());
    }
}